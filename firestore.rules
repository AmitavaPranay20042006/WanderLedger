
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated(request) {
      return request.auth != null && request.auth.uid != null;
    }

    match /users/{userId} {
      function isOwnerOfUserDoc(request, docUserId) {
        return isAuthenticated(request) && request.auth.uid == docUserId;
      }

      function isValidUserCreatePayload(data, request) {
        return data.uid == request.auth.uid &&
               data.email is string && data.email == data.email.lower() &&
               data.displayName is string &&
               data.photoURL is string &&
               data.createdAt == request.time;
      }

      function isValidUserUpdatePayload(oldData, newData, request) {
        return newData.uid == oldData.uid &&
               newData.createdAt == oldData.createdAt &&
               (newData.email == oldData.email || (newData.email is string && newData.email == newData.email.lower())) &&
               (!('displayName' in newData.diff(oldData).affectedKeys()) || newData.displayName is string) &&
               (!('photoURL' in newData.diff(oldData).affectedKeys()) || newData.photoURL is string) &&
               (!('lastLogin' in newData.diff(oldData).affectedKeys()) || newData.lastLogin == request.time);
      }

      allow read: if isAuthenticated(request);
      allow create: if isOwnerOfUserDoc(request, userId) && isValidUserCreatePayload(request.resource.data, request);
      allow update: if isOwnerOfUserDoc(request, userId) && isValidUserUpdatePayload(resource.data, request.resource.data, request);
      allow delete: if isOwnerOfUserDoc(request, userId);
    }

    match /trips/{tripId} {

      function isOwnerOfThisTrip(request, existingTripResource) {
        return isAuthenticated(request) &&
               'ownerId' in existingTripResource.data &&
               existingTripResource.data.ownerId == request.auth.uid;
      }

      function isValidTripCreatePayload(data, request) {
        return isAuthenticated(request) &&
               data.ownerId == request.auth.uid &&
               request.auth.uid in data.members &&
               data.name is string && data.name.size() > 0 && data.name.size() <= 100 &&
               data.destination is string && data.destination.size() > 0 && data.destination.size() <= 100 &&
               data.startDate is timestamp && data.endDate is timestamp && data.endDate >= data.startDate &&
               data.members is list && data.members.size() > 0 &&
               data.coverPhotoURL is string && data.dataAiHint is string &&
               (!('description' in data) || (data.description is string && data.description.size() <= 500)) &&
               ('baseCurrency' in data && data.baseCurrency is string && data.baseCurrency.size() == 3) &&
               data.createdAt == request.time;
      }

      function isValidTripCoreFieldsUpdatePayload(existingData, incomingData) {
        return incomingData.name is string && incomingData.name.size() > 0 && incomingData.name.size() <= 100 &&
               incomingData.destination is string && incomingData.destination.size() > 0 && incomingData.destination.size() <= 100 &&
               incomingData.startDate is timestamp && incomingData.endDate is timestamp && incomingData.endDate >= incomingData.startDate &&
               incomingData.members is list && incomingData.members.size() > 0 && existingData.ownerId in incomingData.members &&
               incomingData.coverPhotoURL is string && incomingData.dataAiHint is string &&
               (!('description' in incomingData) || (incomingData.description is string && incomingData.description.size() <= 500)) &&
               ('baseCurrency' in incomingData && incomingData.baseCurrency is string && incomingData.baseCurrency.size() == 3) &&
               incomingData.ownerId == existingData.ownerId &&
               incomingData.createdAt == existingData.createdAt;
      }

      function isValidTripMembersOnlyUpdatePayload(existingData, incomingData) {
        return incomingData.members is list && incomingData.members.size() >= 0 && // Allow 0 members if owner removes all others
               existingData.ownerId in incomingData.members;
      }

      // Corrected function to use let binding properly or revert to simpler multi-get for now
      function canAccessSubcollection(request, tripId) {
        // Using let binding correctly within the expression for a function
        return isAuthenticated(request) &&
               (let tripDoc = get(/databases/$(database)/documents/trips/$(tripId));
                 tripDoc.exists() &&
                 'members' in tripDoc.data &&
                 tripDoc.data.members is list &&
                 request.auth.uid in tripDoc.data.members
               );
      }

      allow create: if isValidTripCreatePayload(request.resource.data, request);

      allow read: if isAuthenticated(request) &&
                  'members' in resource.data &&
                  resource.data.members is list &&
                  request.auth.uid in resource.data.members;

      allow list: if isAuthenticated(request); // Be cautious: allows listing all trips if not further filtered by client queries.

      allow update: if isOwnerOfThisTrip(request, resource) &&
                    (
                      (request.resource.data.diff(resource.data).affectedKeys().hasAny(['name', 'destination', 'startDate', 'endDate', 'description', 'coverPhotoURL', 'dataAiHint', 'baseCurrency']) &&
                       isValidTripCoreFieldsUpdatePayload(resource.data, request.resource.data)) ||
                      (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members']) &&
                       isValidTripMembersOnlyUpdatePayload(resource.data, request.resource.data))
                    );

      allow delete: if isOwnerOfThisTrip(request, resource);

      match /expenses/{expenseId} {
        function isValidSimplifiedExpenseCreate(data, request) {
          return request.auth.uid == data.paidBy &&
                 data.createdAt == request.time &&
                 data.description is string && data.description.size() > 0 && data.description.size() <= 100 &&
                 data.amount is number && data.amount > 0;
        }

        function isValidSimplifiedExpenseUpdate(oldData, newData, request) {
          return request.auth.uid == oldData.paidBy && // Only original payer can update
                 newData.paidBy == oldData.paidBy && // Payer cannot be changed
                 newData.createdAt == oldData.createdAt && // Timestamp cannot be changed
                 newData.description is string && newData.description.size() > 0 && newData.description.size() <= 100 &&
                 newData.amount is number && newData.amount > 0;
        }

        allow read, list: if canAccessSubcollection(request, tripId);
        allow create: if canAccessSubcollection(request, tripId) && isValidSimplifiedExpenseCreate(request.resource.data, request);
        allow update: if canAccessSubcollection(request, tripId) && isValidSimplifiedExpenseUpdate(resource.data, request.resource.data, request);
        allow delete: if canAccessSubcollection(request, tripId) &&
                      (let trip = get(/databases/$(database)/documents/trips/$(tripId));
                        trip.exists() && trip.data.ownerId == request.auth.uid
                      );
      }

      match /itineraryEvents/{eventId} {
        function isValidItineraryEventPayload(data, request, isCreate, oldData) {
          return data.title is string && data.title.size() > 0 && data.title.size() <= 100 &&
                 data.date is timestamp &&
                 data.type is string && data.type.size() > 0 &&
                 (!('time' in data) || (data.time is string && data.time.matches('^([01][0-9]|2[0-3]):([0-5][0-9])$'))) &&
                 (!('endDate' in data) || (data.endDate is timestamp && data.endDate >= data.date)) &&
                 (!('endTime' in data) || (data.endTime is string && data.endTime.matches('^([01][0-9]|2[0-3]):([0-5][0-9])$'))) &&
                 (!('location' in data) || (data.location is string && data.location.size() <= 150)) &&
                 (!('notes' in data) || (data.notes is string && data.notes.size() <= 1000)) &&
                 (isCreate ? data.createdAt == request.time : data.createdAt == oldData.createdAt);
        }

        allow read, list: if canAccessSubcollection(request, tripId);
        allow create: if canAccessSubcollection(request, tripId) && isValidItineraryEventPayload(request.resource.data, request, true, null);
        allow update: if canAccessSubcollection(request, tripId) && isValidItineraryEventPayload(request.resource.data, request, false, resource.data);
        allow delete: if canAccessSubcollection(request, tripId); // Any member can delete itinerary events
      }

      match /packingItems/{itemId} {
        function isValidPackingItemCreatePayload(data, request) {
          return data.name is string && data.name.size() > 0 && data.name.size() <= 100 &&
                 data.packed == false &&
                 data.addedBy == request.auth.uid &&
                 data.createdAt == request.time;
        }

        function isValidPackingItemUpdatePayload(oldData, newData, request) {
          return newData.name is string && newData.name.size() > 0 && newData.name.size() <= 100 &&
                 newData.packed is bool &&
                 newData.addedBy == oldData.addedBy && // Original adder cannot change
                 newData.createdAt == oldData.createdAt && // Creation timestamp cannot change
                 ( // Logic for lastCheckedBy
                   (newData.packed != oldData.packed && newData.lastCheckedBy == request.auth.uid) ||
                   (newData.packed == oldData.packed && 'lastCheckedBy' in newData.diff(oldData).affectedKeys() && newData.lastCheckedBy == request.auth.uid) ||
                   (newData.packed == oldData.packed && !('lastCheckedBy' in newData.diff(oldData).affectedKeys()))
                 );
                 // Name can be updated by any member with access (implicit from canAccessSubcollection)
        }

        function userCanDeletePackingItem(request, tripId, packingItemResource) {
          return (let trip = get(/databases/$(database)/documents/trips/$(tripId));
                    trip.exists() &&
                    (packingItemResource.data.addedBy == request.auth.uid || trip.data.ownerId == request.auth.uid)
                 );
        }

        allow read, list: if canAccessSubcollection(request, tripId);
        allow create: if canAccessSubcollection(request, tripId) && isValidPackingItemCreatePayload(request.resource.data, request);
        allow update: if canAccessSubcollection(request, tripId) && isValidPackingItemUpdatePayload(resource.data, request.resource.data, request);
        allow delete: if canAccessSubcollection(request, tripId) && userCanDeletePackingItem(request, tripId, resource);
      }

      match /recordedPayments/{paymentId} {
        // Function to validate the creation of a recorded payment
        // Takes the pre-fetched trip document as a parameter
        function isValidRecordedPaymentCreate(data, request, tripDoc) { // tripDoc is the result of get()
          return tripDoc.exists() && // Ensure tripDoc is valid before accessing .data
                 'members' in tripDoc.data && tripDoc.data.members is list && // Check members list existence
                 'baseCurrency' in tripDoc.data && tripDoc.data.baseCurrency is string && // Check baseCurrency
                 data.recordedBy == request.auth.uid &&
                 data.dateRecorded == request.time && // Correct for serverTimestamp on create
                 data.fromUserId in tripDoc.data.members &&
                 data.toUserId in tripDoc.data.members &&
                 data.fromUserId != data.toUserId &&
                 data.amount is number && data.amount > 0 &&
                 data.currency == tripDoc.data.baseCurrency &&
                 (
                   !('notes' in data) ||
                   data.notes == null ||
                   data.notes == '' || // Explicitly allow empty string
                   (data.notes is string && data.notes.size() <= 250)
                 );
        }

        // Rule for reading and listing recorded payments
        allow read, list: if
          (
            let trip = get(/databases/$(database)/documents/trips/$(tripId));
            isAuthenticated(request) &&
            trip.exists() &&
            'members' in trip.data &&
            trip.data.members is list &&
            request.auth.uid in trip.data.members
          );

        // Rule for creating recorded payments
        allow create: if
          (
            let trip = get(/databases/$(database)/documents/trips/$(tripId)); // Fetch trip document once
            // Basic access checks before calling the detailed validation function
            isAuthenticated(request) &&
            trip.exists() && // Ensure the trip document was actually found
            'members' in trip.data && trip.data.members is list && // Ensure members field is a list
            request.auth.uid in trip.data.members && // Ensure the current user is a member of the trip
            // Call the validation function with the incoming data, request, and the fetched trip document
            isValidRecordedPaymentCreate(request.resource.data, request, trip)
          );

        // Disallow updates and deletes for recorded payments for now
        allow update, delete: if false;
      }
    } // End of match /trips/{tripId}
  } // End of match /databases/{database}/documents
} // End of service cloud.firestore

    