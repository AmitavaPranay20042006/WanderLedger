
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated(request) {
      return request.auth != null && request.auth.uid != null;
    }

    match /users/{userId} {
      function isOwnerOfUserDoc(request, docUserId) {
        return isAuthenticated(request) && request.auth.uid == docUserId;
      }

      function isValidUserCreatePayload(data, request) {
        return data.uid == request.auth.uid &&
               data.email is string && data.email == data.email.lower() && // Ensure email is stored lowercase
               data.displayName is string &&
               data.photoURL is string &&
               data.createdAt == request.time;
      }

      function isValidUserUpdatePayload(oldData, newData, request) {
        // UID should not change
        return newData.uid == oldData.uid &&
               // createdAt should not change
               ( !('createdAt' in newData) || newData.createdAt == oldData.createdAt ) &&
               // email can only change if it remains lowercase, or doesn't change
               (newData.email == oldData.email || (newData.email is string && newData.email == newData.email.lower())) &&
               // other fields can be updated if they are the correct type
               (!('displayName' in newData.diff(oldData).affectedKeys()) || newData.displayName is string) &&
               (!('photoURL' in newData.diff(oldData).affectedKeys()) || newData.photoURL is string) &&
               // lastLogin must be server timestamp if updated
               (!('lastLogin' in newData.diff(oldData).affectedKeys()) || newData.lastLogin == request.time);
      }

      allow read: if isAuthenticated(request);
      allow create: if isOwnerOfUserDoc(request, userId) &&
                     isValidUserCreatePayload(request.resource.data, request);
      allow update: if isOwnerOfUserDoc(request, userId) &&
                     isValidUserUpdatePayload(resource.data, request.resource.data, request);
      allow delete: if isOwnerOfUserDoc(request, userId);
    }

    match /trips/{tripId} {

      function isOwnerOfThisTrip(request, existingTripResource) {
        return isAuthenticated(request) &&
               'ownerId' in existingTripResource.data &&
               existingTripResource.data.ownerId == request.auth.uid;
      }

      function isValidTripCreatePayload(data, request) {
        return isAuthenticated(request) &&
               data.ownerId == request.auth.uid &&
               request.auth.uid in data.members &&
               data.name is string && data.name.size() > 0 && data.name.size() <= 100 &&
               data.destination is string && data.destination.size() > 0 && data.destination.size() <= 100 &&
               data.startDate is timestamp && data.endDate is timestamp && data.endDate >= data.startDate &&
               data.members is list && data.members.size() > 0 &&
               data.coverPhotoURL is string && data.dataAiHint is string &&
               (!('description' in data) || (data.description is string && data.description.size() <= 500)) &&
               ('baseCurrency' in data && data.baseCurrency is string && data.baseCurrency.size() == 3) &&
               data.createdAt == request.time;
      }

      function isValidTripCoreFieldsUpdatePayload(existingData, incomingData) {
        return incomingData.name is string && incomingData.name.size() > 0 && incomingData.name.size() <= 100 &&
               incomingData.destination is string && incomingData.destination.size() > 0 && incomingData.destination.size() <= 100 &&
               incomingData.startDate is timestamp && incomingData.endDate is timestamp && incomingData.endDate >= incomingData.startDate &&
               incomingData.members is list && incomingData.members.size() > 0 &&
               existingData.ownerId in incomingData.members && // Owner must remain a member
               incomingData.coverPhotoURL is string && incomingData.dataAiHint is string &&
               (!('description' in incomingData) || (incomingData.description is string && incomingData.description.size() <= 500)) &&
               ('baseCurrency' in incomingData && incomingData.baseCurrency is string && incomingData.baseCurrency.size() == 3) &&
               // Ensure immutable fields are not changed
               incomingData.ownerId == existingData.ownerId &&
               incomingData.createdAt == existingData.createdAt;
      }

      function isValidTripMembersOnlyUpdatePayload(existingData, incomingData) {
          // Check if all fields other than 'members' are unchanged
          let otherFieldsUnchanged = incomingData.diff(existingData).affectedKeys().hasOnly(['members']);
          return otherFieldsUnchanged &&
                 incomingData.members is list &&
                 incomingData.members.size() >= 0 && // Allow empty list if needed, but owner check below is key
                 existingData.ownerId in incomingData.members; // Owner must remain a member
      }


      function canAccessSubcollection(request, tripId) {
        return isAuthenticated(request) &&
               exists(/databases/$(database)/documents/trips/$(tripId)) &&
               'members' in get(/databases/$(database)/documents/trips/$(tripId)).data &&
               get(/databases/$(database)/documents/trips/$(tripId)).data.members is list &&
               request.auth.uid in get(/databases/$(database)/documents/trips/$(tripId)).data.members;
      }

      allow create: if isValidTripCreatePayload(request.resource.data, request);

      allow read: if isAuthenticated(request) &&
                  'members' in resource.data &&
                  resource.data.members is list &&
                  request.auth.uid in resource.data.members;

      allow list: if isAuthenticated(request); // Allow listing trips for authenticated users, filtering done client-side

      allow update: if isOwnerOfThisTrip(request, resource) &&
        (
          // Case 1: Updating core trip fields (excluding just members)
          request.resource.data.diff(resource.data).affectedKeys().hasAny([
            'name', 'destination', 'startDate', 'endDate', 'description', 'coverPhotoURL', 'dataAiHint', 'baseCurrency'
          ]) &&
          !request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members']) && // Ensure it's not *just* a members update
          isValidTripCoreFieldsUpdatePayload(resource.data, request.resource.data)
        ) ||
        (
          // Case 2: Updating only the members array
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members']) &&
          isValidTripMembersOnlyUpdatePayload(resource.data, request.resource.data)
        );


      allow delete: if isOwnerOfThisTrip(request, resource);

      // Subcollections
      match /expenses/{expenseId} {
        function isValidSimplifiedExpenseCreate(data, request, tripDoc) {
          return request.auth.uid == data.paidBy && // Payer must be the authenticated user
                 data.createdAt == request.time && // Creation timestamp must be server time
                 data.description is string && data.description.size() > 0 && data.description.size() <= 100 &&
                 data.amount is number && data.amount > 0 &&
                 data.currency == tripDoc.data.baseCurrency && // Currency must match trip's base currency
                 data.category is string &&
                 data.participants is list && data.participants.size() > 0 &&
                 data.splitType == 'equally' && // Assuming default split type
                 (!('notes' in data) || data.notes == null || data.notes == '' || (data.notes is string && data.notes.size() <= 500));
        }

        function isValidSimplifiedExpenseUpdate(oldData, newData, request, tripDoc) {
           // Only the person who paid OR the trip owner can update (simplification: let's say only payer for now)
          return request.auth.uid == oldData.paidBy &&
                 newData.paidBy == oldData.paidBy && // Payer cannot be changed
                 newData.createdAt == oldData.createdAt && // Creation timestamp cannot be changed
                 newData.description is string && newData.description.size() > 0 && newData.description.size() <= 100 &&
                 newData.amount is number && newData.amount > 0 &&
                 newData.currency == tripDoc.data.baseCurrency && // Currency must match trip's base currency
                 newData.category is string &&
                 newData.participants is list && newData.participants.size() > 0 &&
                 newData.splitType == 'equally' &&
                 (!('notes' in newData) || newData.notes == null || newData.notes == '' || (newData.notes is string && newData.notes.size() <= 500));
        }

        allow read, list: if canAccessSubcollection(request, tripId);
        allow create: if canAccessSubcollection(request, tripId) &&
                       isValidSimplifiedExpenseCreate(request.resource.data, request, get(/databases/$(database)/documents/trips/$(tripId)));
        allow update: if canAccessSubcollection(request, tripId) &&
                       isValidSimplifiedExpenseUpdate(resource.data, request.resource.data, request, get(/databases/$(database)/documents/trips/$(tripId)));
        allow delete: if canAccessSubcollection(request, tripId) &&
                       (get(/databases/$(database)/documents/trips/$(tripId)).data.ownerId == request.auth.uid || resource.data.paidBy == request.auth.uid);
      }

      match /itineraryEvents/{eventId} {
        function isValidItineraryEventPayload(data, request, isCreate, oldData) {
          return data.title is string && data.title.size() > 0 && data.title.size() <= 100 &&
                 data.date is timestamp &&
                 data.type is string && data.type.size() > 0 &&
                 (!('time' in data) || (data.time is string && data.time.matches('^([01][0-9]|2[0-3]):([0-5][0-9])$'))) &&
                 (!('endDate' in data) || (data.endDate is timestamp && data.endDate >= data.date)) &&
                 (!('endTime' in data) || (data.endTime is string && data.endTime.matches('^([01][0-9]|2[0-3]):([0-5][0-9])$'))) &&
                 (!('location' in data) || (data.location is string && data.location.size() <= 150)) &&
                 (!('notes' in data) || (data.notes is string && data.notes.size() <= 1000)) &&
                 (isCreate ? data.createdAt == request.time : data.createdAt == oldData.createdAt);
        }

        allow read, list: if canAccessSubcollection(request, tripId);
        allow create: if canAccessSubcollection(request, tripId) &&
                       isValidItineraryEventPayload(request.resource.data, request, true, null);
        allow update: if canAccessSubcollection(request, tripId) &&
                       isValidItineraryEventPayload(request.resource.data, request, false, resource.data);
        allow delete: if canAccessSubcollection(request, tripId); // Any member can delete itinerary events for now
      }

      match /packingItems/{itemId} {
        function isValidPackingItemCreatePayload(data, request) {
          return data.name is string && data.name.size() > 0 && data.name.size() <= 100 &&
                 data.packed == false &&
                 data.addedBy == request.auth.uid &&
                 data.createdAt == request.time;
        }

        function isValidPackingItemUpdatePayload(oldData, newData, tripDoc, request) {
          // Check if only 'packed' and 'lastCheckedBy' are being changed, or if name is changed by owner/adder
          let allowedKeys = ['packed', 'lastCheckedBy'];
          if (oldData.addedBy == request.auth.uid || tripDoc.data.ownerId == request.auth.uid) {
            allowedKeys.add('name');
          }
          let changingAllowedKeysOnly = newData.diff(oldData).affectedKeys().hasOnly(allowedKeys);

          return changingAllowedKeysOnly &&
                 newData.name is string && newData.name.size() > 0 && newData.name.size() <= 100 &&
                 newData.packed is bool &&
                 newData.addedBy == oldData.addedBy && // addedBy cannot change
                 newData.createdAt == oldData.createdAt && // createdAt cannot change
                 // lastCheckedBy must be the current user if 'packed' status changes or if lastCheckedBy itself is being set
                 ( (newData.packed != oldData.packed && newData.lastCheckedBy == request.auth.uid) ||
                   (newData.packed == oldData.packed && (!('lastCheckedBy' in newData.diff(oldData).affectedKeys()) || newData.lastCheckedBy == request.auth.uid) )
                 );
        }

        function userCanDeletePackingItem(request, tripDoc, itemResource) {
          return itemResource.data.addedBy == request.auth.uid ||
                 tripDoc.data.ownerId == request.auth.uid;
        }

        allow read, list: if canAccessSubcollection(request, tripId);
        allow create: if canAccessSubcollection(request, tripId) &&
                       isValidPackingItemCreatePayload(request.resource.data, request);
        allow update: if canAccessSubcollection(request, tripId) &&
                       isValidPackingItemUpdatePayload(resource.data, request.resource.data, get(/databases/$(database)/documents/trips/$(tripId)), request);
        allow delete: if canAccessSubcollection(request, tripId) &&
                       userCanDeletePackingItem(request, get(/databases/$(database)/documents/trips/$(tripId)), resource);
      }

      match /recordedPayments/{paymentId} {
        // --- DIAGNOSTIC: EXTREMELY SIMPLIFIED CREATE RULE ---
        allow create: if isAuthenticated(request) &&
                       get(/databases/$(database)/documents/trips/$(tripId)).data.members is list && // Basic check on parent
                       request.auth.uid in get(/databases/$(database)/documents/trips/$(tripId)).data.members && // User is a member
                       request.resource.data.recordedBy == request.auth.uid && // recordedBy is the user
                       request.resource.data.dateRecorded == request.time; // uses serverTimestamp
        // --- END DIAGNOSTIC RULE ---

        allow read, list: if canAccessSubcollection(request, tripId);
        allow update, delete: if false; // Keep these restricted for now
      }

    } // /trips/{tripId}
  } // /documents
}
    