
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated(request) {
      return request.auth != null && request.auth.uid != null;
    }

    match /users/{userId} {
      function isOwnerOfUserDoc(request, docUserId) {
        return isAuthenticated(request) && request.auth.uid == docUserId;
      }

      function isValidUserCreatePayload(data, request) {
        return data.uid == request.auth.uid &&
               data.email is string && data.email == data.email.lower() &&
               data.displayName is string &&
               data.photoURL is string &&
               data.createdAt == request.time;
      }

      function isValidUserUpdatePayload(oldData, newData, request) {
        // Ensure createdAt is not changed or is not part of the update
        let createdAtUnchanged = !('createdAt' in newData) || newData.createdAt == oldData.createdAt;

        return newData.uid == oldData.uid &&
               createdAtUnchanged &&
               (newData.email == oldData.email || (newData.email is string && newData.email == newData.email.lower())) &&
               (!('displayName' in newData.diff(oldData).affectedKeys()) || newData.displayName is string) &&
               (!('photoURL' in newData.diff(oldData).affectedKeys()) || newData.photoURL is string) &&
               (!('lastLogin' in newData.diff(oldData).affectedKeys()) || newData.lastLogin == request.time);
      }

      allow read: if isAuthenticated(request);
      allow create: if isOwnerOfUserDoc(request, userId) &&
                     isValidUserCreatePayload(request.resource.data, request);
      allow update: if isOwnerOfUserDoc(request, userId) &&
                     isValidUserUpdatePayload(resource.data, request.resource.data, request);
      allow delete: if isOwnerOfUserDoc(request, userId);
    }

    match /trips/{tripId} {

      function isOwnerOfThisTrip(request, existingTripResource) {
        return isAuthenticated(request) &&
               'ownerId' in existingTripResource.data &&
               existingTripResource.data.ownerId == request.auth.uid;
      }

      function isValidTripCreatePayload(data, request) {
        return isAuthenticated(request) &&
               data.ownerId == request.auth.uid &&
               request.auth.uid in data.members &&
               data.name is string && data.name.size() > 0 && data.name.size() <= 100 &&
               data.destination is string && data.destination.size() > 0 && data.destination.size() <= 100 &&
               data.startDate is timestamp && data.endDate is timestamp && data.endDate >= data.startDate &&
               data.members is list && data.members.size() > 0 &&
               data.coverPhotoURL is string && data.dataAiHint is string &&
               (!('description' in data) || (data.description is string && data.description.size() <= 500)) &&
               ('baseCurrency' in data && data.baseCurrency is string && data.baseCurrency.size() == 3) &&
               data.createdAt == request.time;
      }

      function isValidTripCoreFieldsUpdatePayload(existingData, incomingData) {
        return incomingData.name is string && incomingData.name.size() > 0 && incomingData.name.size() <= 100 &&
               incomingData.destination is string && incomingData.destination.size() > 0 && incomingData.destination.size() <= 100 &&
               incomingData.startDate is timestamp && incomingData.endDate is timestamp && incomingData.endDate >= incomingData.startDate &&
               incomingData.members is list && incomingData.members.size() > 0 &&
               existingData.ownerId in incomingData.members &&
               incomingData.coverPhotoURL is string && incomingData.dataAiHint is string &&
               (!('description' in incomingData) || (incomingData.description is string && incomingData.description.size() <= 500)) &&
               ('baseCurrency' in incomingData && incomingData.baseCurrency is string && incomingData.baseCurrency.size() == 3) &&
               incomingData.ownerId == existingData.ownerId &&
               incomingData.createdAt == existingData.createdAt;
      }

      function isValidTripMembersOnlyUpdatePayload(existingData, incomingData) {
        // Allow members list to be empty temporarily if owner is making changes, but owner must remain.
        return incomingData.members is list &&
               existingData.ownerId in incomingData.members;
      }

      function canAccessSubcollection(request, tripId) {
        let tripDoc = get(/databases/$(database)/documents/trips/$(tripId));
        return isAuthenticated(request) &&
               tripDoc.exists() &&
               'members' in tripDoc.data &&
               tripDoc.data.members is list &&
               request.auth.uid in tripDoc.data.members;
      }

      allow create: if isValidTripCreatePayload(request.resource.data, request);

      allow read: if isAuthenticated(request) &&
                  'members' in resource.data &&
                  resource.data.members is list &&
                  request.auth.uid in resource.data.members;

      allow list: if isAuthenticated(request); // Usually requires query constraints for security/performance

      allow update: if isOwnerOfThisTrip(request, resource) &&
        (
          // Rule for updating core trip fields
          request.resource.data.diff(resource.data).affectedKeys().hasAny([
            'name', 'destination', 'startDate', 'endDate', 'description', 'coverPhotoURL', 'dataAiHint', 'baseCurrency'
          ]) &&
          isValidTripCoreFieldsUpdatePayload(resource.data, request.resource.data)
        ) ||
        (
          // Rule for updating only the members array
          request.resource.data.diff(resource.data).hasOnly(['members']) &&
          isValidTripMembersOnlyUpdatePayload(resource.data, request.resource.data)
        );

      allow delete: if isOwnerOfThisTrip(request, resource);

      match /expenses/{expenseId} {
        function isValidSimplifiedExpenseCreate(data, request, tripDoc) {
          return request.auth.uid == data.paidBy &&
                 data.createdAt == request.time &&
                 data.description is string && data.description.size() > 0 && data.description.size() <= 100 &&
                 data.amount is number && data.amount > 0 &&
                 data.currency is string && data.currency.size() == 3 && data.currency == tripDoc.data.baseCurrency &&
                 data.participants is list && data.participants.size() > 0 &&
                 data.participants.hasAny(data.paidBy) && // Ensure payer is a participant
                 data.participants.hasAll(data.participants) && // All participants must be in the members list
                 data.participants.size() <= tripDoc.data.members.size() &&
                 data.participants.hasAll(tripDoc.data.members.filter(member => data.participants.hasAny(member))) && // More robust check
                 (!('notes' in data) || (data.notes is string && data.notes.size() <= 500));
        }

        function isValidSimplifiedExpenseUpdate(oldData, newData, request, tripDoc) {
          return request.auth.uid == oldData.paidBy && // Only payer can update for now
                 newData.paidBy == oldData.paidBy &&
                 newData.createdAt == oldData.createdAt &&
                 newData.description is string && newData.description.size() > 0 && newData.description.size() <= 100 &&
                 newData.amount is number && newData.amount > 0 &&
                 newData.currency is string && newData.currency.size() == 3 && newData.currency == tripDoc.data.baseCurrency &&
                 newData.participants is list && newData.participants.size() > 0 &&
                 newData.participants.hasAny(newData.paidBy) &&
                 newData.participants.hasAll(tripDoc.data.members.filter(member => newData.participants.hasAny(member))) &&
                 (!('notes' in newData) || (newData.notes is string && newData.notes.size() <= 500));
        }

        allow read, list: if canAccessSubcollection(request, tripId);
        allow create: if canAccessSubcollection(request, tripId) &&
                       isValidSimplifiedExpenseCreate(request.resource.data, request, get(/databases/$(database)/documents/trips/$(tripId)));
        allow update: if canAccessSubcollection(request, tripId) &&
                       isValidSimplifiedExpenseUpdate(resource.data, request.resource.data, request, get(/databases/$(database)/documents/trips/$(tripId)));
        allow delete: if canAccessSubcollection(request, tripId) &&
                       get(/databases/$(database)/documents/trips/$(tripId)).data.ownerId == request.auth.uid;
      }

      match /itineraryEvents/{eventId} {
        function isValidItineraryEventPayload(data, request, isCreate, oldData) {
          return data.title is string && data.title.size() > 0 && data.title.size() <= 100 &&
                 data.date is timestamp &&
                 data.type is string && data.type.size() > 0 &&
                 (!('time' in data) || (data.time is string && data.time.matches('^([01][0-9]|2[0-3]):([0-5][0-9])$'))) &&
                 (!('endDate' in data) || (data.endDate is timestamp && data.endDate >= data.date)) &&
                 (!('endTime' in data) || (data.endTime is string && data.endTime.matches('^([01][0-9]|2[0-3]):([0-5][0-9])$'))) &&
                 (!('location' in data) || (data.location is string && data.location.size() <= 150)) &&
                 (!('notes' in data) || (data.notes is string && data.notes.size() <= 1000)) &&
                 (isCreate ? data.createdAt == request.time : data.createdAt == oldData.createdAt);
        }

        allow read, list: if canAccessSubcollection(request, tripId);
        allow create: if canAccessSubcollection(request, tripId) &&
                       isValidItineraryEventPayload(request.resource.data, request, true, null);
        allow update: if canAccessSubcollection(request, tripId) &&
                       isValidItineraryEventPayload(request.resource.data, request, false, resource.data);
        allow delete: if canAccessSubcollection(request, tripId); // Any member can delete for now
      }

      match /packingItems/{itemId} {
        function isValidPackingItemCreatePayload(data, request) {
          return data.name is string && data.name.size() > 0 && data.name.size() <= 100 &&
                 data.packed == false &&
                 data.addedBy == request.auth.uid &&
                 data.createdAt == request.time;
        }

        function isValidPackingItemUpdatePayload(oldData, newData, tripId, request) {
          let tripDoc = get(/databases/$(database)/documents/trips/$(tripId));
          return newData.name is string && newData.name.size() > 0 && newData.name.size() <= 100 &&
                 newData.packed is bool &&
                 newData.addedBy == oldData.addedBy && // AddedBy cannot change
                 newData.createdAt == oldData.createdAt && // CreatedAt cannot change
                 ( // Logic for lastCheckedBy
                   (newData.packed != oldData.packed && newData.lastCheckedBy == request.auth.uid) || // If packed status changed, lastCheckedBy must be current user
                   (newData.packed == oldData.packed && !('lastCheckedBy' in newData.diff(oldData).affectedKeys())) || // If packed status same, and lastCheckedBy not changed, allow
                   (newData.packed == oldData.packed && 'lastCheckedBy' in newData.diff(oldData).affectedKeys() && newData.lastCheckedBy == request.auth.uid) // If packed status same, but lastCheckedBy is changed, it must be current user
                 ) &&
                 ( // Logic for name change: only addedBy or trip owner can change name
                   !('name' in newData.diff(oldData).affectedKeys()) || // If name is not changed, allow
                   oldData.addedBy == request.auth.uid || // Or if current user is the one who added item
                   tripDoc.data.ownerId == request.auth.uid // Or if current user is the trip owner
                 );
        }

        function userCanDeletePackingItem(request, tripId, resource) {
          let tripDoc = get(/databases/$(database)/documents/trips/$(tripId));
          return resource.data.addedBy == request.auth.uid || // User who added it
                 tripDoc.data.ownerId == request.auth.uid;     // Or trip owner
        }

        allow read, list: if canAccessSubcollection(request, tripId);
        allow create: if canAccessSubcollection(request, tripId) &&
                       isValidPackingItemCreatePayload(request.resource.data, request);
        allow update: if canAccessSubcollection(request, tripId) &&
                       isValidPackingItemUpdatePayload(resource.data, request.resource.data, tripId, request);
        allow delete: if canAccessSubcollection(request, tripId) &&
                       userCanDeletePackingItem(request, tripId, resource);
      }

      match /recordedPayments/{paymentId} {
        allow read, list: if canAccessSubcollection(request, tripId);
        allow create:
          if isAuthenticated(request) &&
             get(/databases/$(database)/documents/trips/$(tripId)).exists() &&
             'members' in get(/databases/$(database)/documents/trips/$(tripId)).data &&
             get(/databases/$(database)/documents/trips/$(tripId)).data.members is list &&
             request.auth.uid in get(/databases/$(database)/documents/trips/$(tripId)).data.members &&
             // Check baseCurrency existence and type
             'baseCurrency' in get(/databases/$(database)/documents/trips/$(tripId)).data &&
             get(/databases/$(database)/documents/trips/$(tripId)).data.baseCurrency is string &&
             // Basic check on incoming currency for now
             request.resource.data.currency is string && request.resource.data.currency.size() == 3 &&
             // Restore other checks
             request.resource.data.recordedBy == request.auth.uid &&
             request.resource.data.dateRecorded == request.time &&
             request.resource.data.fromUserId in get(/databases/$(database)/documents/trips/$(tripId)).data.members &&
             request.resource.data.toUserId in get(/databases/$(database)/documents/trips/$(tripId)).data.members &&
             request.resource.data.fromUserId != request.resource.data.toUserId &&
             request.resource.data.amount is number && request.resource.data.amount > 0 &&
             (!('notes' in request.resource.data) || request.resource.data.notes == null || request.resource.data.notes == '' || (request.resource.data.notes is string && request.resource.data.notes.size() <= 250));

        allow update, delete: if false; // Payments are immutable once created
      }

    } // /trips/{tripId}
  } // /documents
}

    