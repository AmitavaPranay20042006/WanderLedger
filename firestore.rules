
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated(request) {
      return request.auth != null && request.auth.uid != null;
    }

    match /users/{userId} {
      function isOwnerOfUserDoc(request, docUserId) {
        return isAuthenticated(request) && request.auth.uid == docUserId;
      }

      function isValidUserCreatePayload(data, request) {
        return data.uid == request.auth.uid &&
               data.email is string && data.email == data.email.lower() &&
               data.displayName is string &&
               data.photoURL is string &&
               data.createdAt == request.time;
      }

      function isValidUserUpdatePayload(oldData, newData, request) {
        // Ensure createdAt is not changed or is not part of the update if it already exists
        return newData.uid == oldData.uid &&
               ( !('createdAt' in newData.diff(oldData).affectedKeys()) || newData.createdAt == oldData.createdAt ) &&
               (newData.email == oldData.email || (newData.email is string && newData.email == newData.email.lower())) &&
               (!('displayName' in newData.diff(oldData).affectedKeys()) || newData.displayName is string) &&
               (!('photoURL' in newData.diff(oldData).affectedKeys()) || newData.photoURL is string) &&
               (!('lastLogin' in newData.diff(oldData).affectedKeys()) || newData.lastLogin == request.time);
      }

      allow read: if isAuthenticated(request);
      allow create: if isOwnerOfUserDoc(request, userId) &&
                     isValidUserCreatePayload(request.resource.data, request);
      allow update: if isOwnerOfUserDoc(request, userId) &&
                     isValidUserUpdatePayload(resource.data, request.resource.data, request);
      allow delete: if isOwnerOfUserDoc(request, userId);
    }

    match /trips/{tripId} {

      function isOwnerOfThisTrip(request, existingTripResource) {
        return isAuthenticated(request) &&
               'ownerId' in existingTripResource.data &&
               existingTripResource.data.ownerId == request.auth.uid;
      }

      function isValidTripCreatePayload(data, request) {
        return isAuthenticated(request) &&
               data.ownerId == request.auth.uid &&
               request.auth.uid in data.members &&
               data.name is string && data.name.size() > 0 && data.name.size() <= 100 &&
               data.destination is string && data.destination.size() > 0 && data.destination.size() <= 100 &&
               data.startDate is timestamp && data.endDate is timestamp && data.endDate >= data.startDate &&
               data.members is list && data.members.size() > 0 &&
               data.coverPhotoURL is string && data.dataAiHint is string &&
               (!('description' in data) || (data.description is string && data.description.size() <= 500)) &&
               ('baseCurrency' in data && data.baseCurrency is string && data.baseCurrency.size() == 3) &&
               data.createdAt == request.time;
      }

      function isValidTripCoreFieldsUpdatePayload(existingData, incomingData) {
        return incomingData.name is string && incomingData.name.size() > 0 && incomingData.name.size() <= 100 &&
               incomingData.destination is string && incomingData.destination.size() > 0 && incomingData.destination.size() <= 100 &&
               incomingData.startDate is timestamp && incomingData.endDate is timestamp && incomingData.endDate >= incomingData.startDate &&
               incomingData.members is list && incomingData.members.size() > 0 &&
               existingData.ownerId in incomingData.members &&
               incomingData.coverPhotoURL is string && incomingData.dataAiHint is string &&
               (!('description' in incomingData) || (incomingData.description is string && incomingData.description.size() <= 500)) &&
               ('baseCurrency' in incomingData && incomingData.baseCurrency is string && incomingData.baseCurrency.size() == 3) &&
               incomingData.ownerId == existingData.ownerId &&
               incomingData.createdAt == existingData.createdAt;
      }

      function isValidTripMembersOnlyUpdatePayload(existingData, incomingData) {
        return incomingData.members is list && incomingData.members.size() >= 0 && // Allow empty members list for removal of all but owner might be complex
               existingData.ownerId in incomingData.members;
      }

      function canAccessSubcollection(request, tripId) {
        return isAuthenticated(request) &&
               exists(/databases/$(database)/documents/trips/$(tripId)) &&
               'members' in get(/databases/$(database)/documents/trips/$(tripId)).data &&
               get(/databases/$(database)/documents/trips/$(tripId)).data.members is list &&
               request.auth.uid in get(/databases/$(database)/documents/trips/$(tripId)).data.members;
      }

      allow create: if isValidTripCreatePayload(request.resource.data, request);

      allow read: if isAuthenticated(request) &&
                  'members' in resource.data &&
                  resource.data.members is list &&
                  request.auth.uid in resource.data.members;

      allow list: if isAuthenticated(request); // Consider restricting list further based on user's trips

      allow update: if isOwnerOfThisTrip(request, resource) &&
        ( // Case 1: Updating core trip fields (excluding members)
          request.resource.data.diff(resource.data).affectedKeys().hasOnly([
            'name', 'destination', 'startDate', 'endDate', 'description', 'coverPhotoURL', 'dataAiHint', 'baseCurrency'
          ]) &&
          isValidTripCoreFieldsUpdatePayload(resource.data, request.resource.data)
        ) ||
        ( // Case 2: Updating only members
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members']) &&
          isValidTripMembersOnlyUpdatePayload(resource.data, request.resource.data)
        );

      allow delete: if isOwnerOfThisTrip(request, resource);

      match /expenses/{expenseId} {
        function isValidSimplifiedExpenseCreate(data, request) {
          return request.auth.uid == data.paidBy && // Payer must be current user
                 data.createdAt == request.time &&
                 data.description is string && data.description.size() > 0 && data.description.size() <= 100 &&
                 data.amount is number && data.amount > 0 &&
                 data.currency is string && data.currency.size() == 3 && // Basic currency check
                 data.paidBy is string &&
                 data.category is string &&
                 data.participants is list && data.participants.size() > 0 &&
                 request.auth.uid in data.participants; // Ensure payer is a participant
        }

        function isValidSimplifiedExpenseUpdate(oldData, newData, request) {
          return request.auth.uid == oldData.paidBy && // Only original payer can update
                 newData.paidBy == oldData.paidBy &&
                 newData.createdAt == oldData.createdAt && // Keep original creation time
                 newData.description is string && newData.description.size() > 0 && newData.description.size() <= 100 &&
                 newData.amount is number && newData.amount > 0 &&
                 newData.currency == oldData.currency && // Currency cannot change
                 newData.category is string &&
                 newData.participants is list && newData.participants.size() > 0 &&
                 request.auth.uid in newData.participants; // Ensure payer remains a participant
        }

        allow read, list: if canAccessSubcollection(request, tripId);
        allow create: if canAccessSubcollection(request, tripId) &&
                       isValidSimplifiedExpenseCreate(request.resource.data, request);
        allow update: if canAccessSubcollection(request, tripId) &&
                       isValidSimplifiedExpenseUpdate(resource.data, request.resource.data, request);
        allow delete: if canAccessSubcollection(request, tripId) &&
                       (get(/databases/$(database)/documents/trips/$(tripId)).data.ownerId == request.auth.uid || resource.data.paidBy == request.auth.uid);
      }

      match /itineraryEvents/{eventId} {
        function isValidItineraryEventPayload(data, request, isCreate, oldData) {
          return data.title is string && data.title.size() > 0 && data.title.size() <= 100 &&
                 data.date is timestamp &&
                 data.type is string && data.type.size() > 0 &&
                 (!('time' in data) || (data.time is string && data.time.matches('^([01][0-9]|2[0-3]):([0-5][0-9])$'))) &&
                 (!('endDate' in data) || (data.endDate is timestamp && data.endDate >= data.date)) &&
                 (!('endTime' in data) || (data.endTime is string && data.endTime.matches('^([01][0-9]|2[0-3]):([0-5][0-9])$'))) &&
                 (!('location' in data) || (data.location is string && data.location.size() <= 150)) &&
                 (!('notes' in data) || (data.notes is string && data.notes.size() <= 1000)) &&
                 (isCreate ? data.createdAt == request.time : data.createdAt == oldData.createdAt);
        }

        allow read, list: if canAccessSubcollection(request, tripId);
        allow create: if canAccessSubcollection(request, tripId) &&
                       isValidItineraryEventPayload(request.resource.data, request, true, null);
        allow update: if canAccessSubcollection(request, tripId) &&
                       isValidItineraryEventPayload(request.resource.data, request, false, resource.data);
        allow delete: if canAccessSubcollection(request, tripId);
      }

      match /packingItems/{itemId} {
        function isValidPackingItemCreatePayload(data, request) {
          return data.name is string && data.name.size() > 0 && data.name.size() <= 100 &&
                 data.packed == false &&
                 data.addedBy == request.auth.uid &&
                 data.createdAt == request.time;
        }

        function isValidPackingItemUpdatePayload(oldData, newData, tripId, request) {
          let tripOwnerId = get(/databases/$(database)/documents/trips/$(tripId)).data.ownerId;
          return newData.name is string && newData.name.size() > 0 && newData.name.size() <= 100 &&
                 newData.packed is bool &&
                 newData.addedBy == oldData.addedBy && // original adder cannot change
                 newData.createdAt == oldData.createdAt && // original creation time cannot change
                 ( // Logic for who can update 'packed' and 'lastCheckedBy'
                   (newData.packed != oldData.packed && 'lastCheckedBy' in newData.diff(oldData).affectedKeys() && newData.lastCheckedBy == request.auth.uid) || // User toggled packed and is lastCheckedBy
                   (newData.packed == oldData.packed && 'lastCheckedBy' in newData.diff(oldData).affectedKeys() && newData.lastCheckedBy == request.auth.uid) || // Only lastCheckedBy changed by user
                   (newData.packed == oldData.packed && !('lastCheckedBy' in newData.diff(oldData).affectedKeys())) // No change to packed or lastCheckedBy
                 ) &&
                 ( // Logic for who can update 'name'
                   !('name' in newData.diff(oldData).affectedKeys()) || // Name not changed OR
                   oldData.addedBy == request.auth.uid || // Original adder can change name OR
                   tripOwnerId == request.auth.uid // Trip owner can change name
                 );
        }

        function userCanDeletePackingItem(request, tripId, packingItemResource) {
          return packingItemResource.data.addedBy == request.auth.uid ||
                 get(/databases/$(database)/documents/trips/$(tripId)).data.ownerId == request.auth.uid;
        }

        allow read, list: if canAccessSubcollection(request, tripId);
        allow create: if canAccessSubcollection(request, tripId) &&
                       isValidPackingItemCreatePayload(request.resource.data, request);
        allow update: if canAccessSubcollection(request, tripId) &&
                       isValidPackingItemUpdatePayload(resource.data, request.resource.data, tripId, request);
        allow delete: if canAccessSubcollection(request, tripId) &&
                       userCanDeletePackingItem(request, tripId, resource);
      }

      match /recordedPayments/{paymentId} {
        allow read, list: if canAccessSubcollection(request, tripId);
        allow create: if
          isAuthenticated(request) &&
          get(/databases/$(database)/documents/trips/$(tripId)).exists() &&
          'members' in get(/databases/$(database)/documents/trips/$(tripId)).data &&
          get(/databases/$(database)/documents/trips/$(tripId)).data.members is list &&
          request.auth.uid in get(/databases/$(database)/documents/trips/$(tripId)).data.members &&
          'baseCurrency' in get(/databases/$(database)/documents/trips/$(tripId)).data &&
          get(/databases/$(database)/documents/trips/$(tripId)).data.baseCurrency is string &&
          // --- DIAGNOSTIC CURRENCY CHECK ---
          get(/databases/$(database)/documents/trips/$(tripId)).data.baseCurrency == "INR" && // Check if stored value is exactly "INR"
          request.resource.data.currency == "INR" && // Check if incoming value is exactly "INR"
          // --- END DIAGNOSTIC ---
          request.resource.data.recordedBy == request.auth.uid &&
          request.resource.data.dateRecorded == request.time &&
          request.resource.data.fromUserId in get(/databases/$(database)/documents/trips/$(tripId)).data.members &&
          request.resource.data.toUserId in get(/databases/$(database)/documents/trips/$(tripId)).data.members &&
          request.resource.data.fromUserId != request.resource.data.toUserId &&
          request.resource.data.amount is number && request.resource.data.amount > 0 &&
          (!('notes' in request.resource.data) || request.resource.data.notes == null || request.resource.data.notes == '' || (request.resource.data.notes is string && request.resource.data.notes.size() <= 250));
        allow update, delete: if false;
      }

    } // /trips/{tripId}
  } // /documents
}
